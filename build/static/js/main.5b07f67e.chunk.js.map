{"version":3,"sources":["theme/Header.ts","theme/Page.ts","theme/ButtonIcon.ts","theme/Input.ts","theme/Row.ts","actions/movies-view.action.ts","containers/NavBar.container.tsx","store/movies-view.store.ts","theme/MoviesContainer.ts","theme/Card.ts","components/MovieCard.component.tsx","theme/Bar.ts","components/MovieBar.component.tsx","containers/MoviesList.container.tsx","actions/movie.action.ts","components/PageMovies.component.tsx","components/MoviePage.component.tsx","containers/MoviePage.container.tsx","components/PageMovie.component.tsx","serviceWorker.ts","reducers/movies.reducer.ts","store/movie.store.ts","reducers/index.ts","actions/movies.actions.ts","reducers/movies-view.reducer.ts","reducers/movie.reducer.ts","store/index.ts","index.tsx","App.tsx"],"names":["Header","styled","header","Page","section","ButtonIcon","div","Input","input","Row","changeMoviesView","viewMode","type","payload","NavBarContainer","dispatch","useDispatch","onClick","width","placeholder","onChange","e","console","log","MoviesContainer","Card","MovieCardComponent","movie","callback","to","id","className","style","backgroundImage","img","name","rate","description","Bar","MovieBarComponent","MoviesListContainer","movies","useSelector","state","moviesView","clickCallback","selectMovie","data","length","map","key","PageMoviesComponent","MoviePageComponent","MoviePageContainer","PageMovieComponent","Boolean","window","location","hostname","match","moviesStateInitial","loading","error","MovieInitialState","combineReducers","action","Store","createStore","rootReducer","applyMiddleware","thunk","fetch","then","response","json","fetchMoviesSuccess","catch","fetchMoviesFailure","ReactDOM","render","store","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5b07f67e.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\nimport {theme} from \"./theme\"\r\n\r\nexport const Header = styled.header`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background-color: white;\r\n    width: 100%;\r\n    height: 5vmin;\r\n    font-family: Roboto, sans-serif;\r\n    font-size: 3vmin;\r\n    text-align: center;\r\n`;","import styled from \"styled-components\";\r\nimport {theme} from \"./theme\"\r\n\r\nexport const Page = styled.section`\r\n    display: block;\r\n    height: 95vmin;\r\n    max-width: 900px;\r\n    width: 100%;\r\n    margin: 0 auto;\r\n`;","import styled from \"styled-components\";\r\nimport {theme} from \"./theme\"\r\n\r\nexport const ButtonIcon = styled.div`\r\n    display: flex;\r\n    align-item: center;\r\n    justify-content: center;\r\n    width: 6vmin;\r\n    height: 6vmin;\r\n    background-color: white;\r\n    font-size: 90%;\r\n    user-select: none;\r\n    color: black;\r\n    margin: 0 1vmin;\r\n`;","import styled from \"styled-components\";\r\nimport {theme} from \"./theme\"\r\n\r\nexport const Input = styled.input`\r\n    display: flex;\r\n    width: 80vmin;\r\n    height: 4.4vmin;\r\n    font-size: 3vmin;\r\n    border: none;\r\n    padding: 0.7vmin 1vmin;\r\n    margin: auto 2vmin;\r\n`;","import styled from \"styled-components\";\r\nimport {theme} from \"./theme\"\r\n\r\nexport const Row = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n    height: 8vmin;\r\n    align-items: center;\r\n    justify-content: center;\r\n`;","/**\r\n * Movies View action names\r\n */\r\nconst MOVIES_VIEW_CHANGE = \"[Movies View] Change\";\r\n\r\n/**\r\n * Movies View action type definition\r\n */\r\nexport type TMoviesViewAction = {\r\n    type: string,\r\n    payload: string\r\n}\r\n\r\n/**\r\n * Movies View change action\r\n * @param viewMode\r\n */\r\nexport const changeMoviesView = (viewMode: string): TMoviesViewAction => ({\r\n    type: MOVIES_VIEW_CHANGE,\r\n    payload: viewMode\r\n});","import {ButtonIcon} from \"../theme/ButtonIcon\";\r\nimport {ViewModule} from \"styled-icons/material/ViewModule\";\r\nimport {ViewList} from \"styled-icons/material/ViewList\";\r\nimport {Input} from \"../theme/Input\";\r\nimport {Row} from \"../theme/Row\";\r\nimport React from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {changeMoviesView} from \"../actions/movies-view.action\";\r\nimport {MOVIES_VIEW_GRID, MOVIES_VIEW_LIST} from \"../store/movies-view.store\";\r\n\r\nexport const NavBarContainer: React.FC = () => {\r\n    const dispatch: Dispatch = useDispatch();\r\n\r\n    return (\r\n        <Row>\r\n            <ButtonIcon onClick={() => {\r\n                dispatch(changeMoviesView(MOVIES_VIEW_GRID))\r\n            }}>\r\n                <ViewModule width={\"80%\"}/>\r\n            </ButtonIcon>\r\n            <ButtonIcon onClick={() => {\r\n                dispatch(changeMoviesView(MOVIES_VIEW_LIST))\r\n            }}>\r\n                <ViewList width={\"80%\"}/>\r\n            </ButtonIcon>\r\n            <Input placeholder={\"Search...\"}\r\n                onChange={()=>(e: Event)=>{console.log(e)}}/>\r\n        </Row>\r\n    )\r\n}","export const MOVIES_VIEW_GRID = \"[Movies View] Grid\";\r\nexport const MOVIES_VIEW_LIST = \"[Movies View] List\";\r\n\r\nexport const MoviesViewStateInitial = MOVIES_VIEW_GRID;","import styled from \"styled-components\";\r\nimport {theme} from \"./theme\"\r\n\r\nexport const MoviesContainer = styled.div`\r\n    width: 100%;\r\n    height:87vmin;\r\n    overflow-y: scroll;\r\n`;","import styled from \"styled-components\";\r\nimport {theme} from \"./theme\"\r\n\r\nexport const Card = styled.div`\r\n    display: inline-block;\r\n    padding: 2vmin;\r\n    margin: 1vmin 2vmin;\r\n    width: 28vmin;\r\n    height: 40vmin;\r\n    background-color: white;\r\n    overflow: hidden;\r\n`;","import React from \"react\";\r\nimport {TMovie} from \"../store/movie.store\";\r\nimport {Card} from \"../theme/Card\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const MovieCardComponent: React.FC<{movie: TMovie, callback: Function}> =\r\n({movie, callback}): React.ReactElement => {\r\n    return (\r\n        <NavLink to={`/${movie.id}`}>\r\n        <Card onClick={() => {callback()}}>\r\n            <div className=\"movie-card-img\"\r\n                style={{backgroundImage: `url(\"movie-covers/${movie.img}\")`}} />\r\n            <div>\r\n                <div className={\"movie-card-title\"}>\r\n                    {movie.name}\r\n                </div>\r\n                <div className={\"movie-card-rate\"}>\r\n                    Rate: {movie.rate}\r\n                </div>\r\n                <div className={\"movie-card-description\"}>\r\n                    {movie.description}\r\n                </div>\r\n            </div>\r\n        </Card>\r\n        </NavLink>\r\n    )\r\n};\r\n","import styled from \"styled-components\";\r\nimport {theme} from \"./theme\"\r\n\r\nexport const Bar = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 1vmin;\r\n    width: 100%;\r\n    height: 18vmin;\r\n    background-color: white;\r\n    margin: 1vmin;\r\n`;","import React from \"react\";\r\nimport {TMovie} from \"../store/movie.store\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Bar} from \"../theme/Bar\";\r\n\r\nexport const MovieBarComponent: React.FC<{movie: TMovie, callback: Function}> =\r\n({movie, callback}): React.ReactElement => {\r\n    return (\r\n        <NavLink to={`/${movie.id}`}>\r\n        <Bar onClick={() => {callback()}}>\r\n            <div className=\"movie-bar-img\"\r\n                style={{backgroundImage: `url(\"movie-covers/${movie.img}\")`}} />\r\n            <div className={\"movie-bar-rate\"}>\r\n                Rate: {movie.rate}\r\n            </div>\r\n            <div className={\"movie-bar-container\"}>\r\n                <div className={\"movie-bar-title\"}>\r\n                    {movie.name}\r\n                </div>\r\n                <div className={\"movie-bar-description\"}>\r\n                    {movie.description}\r\n                </div>\r\n            </div>\r\n        </Bar>\r\n        </NavLink>\r\n    )\r\n};\r\n","import {Bar} from \"../theme/Bar\";\r\nimport React from \"react\";\r\nimport {Dispatch} from \"redux\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {TState} from \"../store\";\r\nimport {Card} from \"../theme/Card\";\r\nimport {MoviesContainer} from \"../theme/MoviesContainer\";\r\nimport {MOVIES_VIEW_GRID, MOVIES_VIEW_LIST} from \"../store/movies-view.store\";\r\nimport {MovieCardComponent} from \"../components/MovieCard.component\";\r\nimport {TMovie} from \"../store/movie.store\";\r\nimport {selectMovie} from \"../actions/movie.action\";\r\nimport {MovieBarComponent} from \"../components/MovieBar.component\";\r\n\r\nexport const MoviesListContainer: React.FC = () => {\r\n    const dispatch: Dispatch = useDispatch();\r\n    const movies = useSelector((state: TState) => state.movies);\r\n    const moviesView = useSelector((state: TState) => state.moviesView);\r\n    const clickCallback = (movie: TMovie) => {\r\n        dispatch(selectMovie(movie))\r\n    };\r\n\r\n    return (\r\n        <MoviesContainer>\r\n            {(movies && movies.data && movies.data.length > 0)\r\n                ? movies.data.map((movie: TMovie) => {\r\n                    switch (moviesView) {\r\n                        case MOVIES_VIEW_GRID:\r\n                            return <MovieCardComponent\r\n                                movie={movie}\r\n                                key={movie.id}\r\n                                callback={() => {clickCallback(movie)}}\r\n                            />;\r\n                        case MOVIES_VIEW_LIST:\r\n                            return <MovieBarComponent\r\n                                movie={movie}\r\n                                key={movie.id}\r\n                                callback={() => {clickCallback(movie)}} />;\r\n                        default:\r\n                            return <MovieCardComponent\r\n                                movie={movie}\r\n                                key={movie.id}\r\n                                callback={() => {clickCallback(movie)}}\r\n                            />;\r\n                    }\r\n                })\r\n                : \"No movies\"\r\n            }\r\n        </MoviesContainer>\r\n    )\r\n};","/**\r\n * Movie actions names\r\n */\r\nimport {TMovie} from \"../store/movie.store\";\r\n\r\nconst MOVIE_SET = \"[Movie] Set\";\r\n\r\n/**\r\n * Movie action type definition\r\n */\r\nexport type TMovieAction = {\r\n    type: string,\r\n    payload: TMovie\r\n}\r\n\r\n/**\r\n * Movie select action\r\n * Should be fetch with async action in real world,\r\n * like all movies list\r\n * @param movie\r\n */\r\nexport const selectMovie = (movie: TMovie): TMovieAction => ({\r\n    type: MOVIE_SET,\r\n    payload: movie\r\n});","import React from \"react\";\r\nimport {Page} from \"../theme/Page\";\r\nimport {NavBarContainer} from \"../containers/NavBar.container\";\r\nimport {MoviesListContainer} from \"../containers/MoviesList.container\";\r\n\r\nexport const PageMoviesComponent: React.FC = () => {\r\n    return (\r\n        <Page>\r\n            <NavBarContainer />\r\n            <MoviesListContainer />\r\n        </Page>\r\n    );\r\n};","import React from \"react\";\r\nimport {TMovie} from \"../store/movie.store\";\r\nimport {Card} from \"../theme/Card\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const MoviePageComponent: React.FC<{movie: TMovie}> =\r\n({movie}): React.ReactElement => {\r\n    return (\r\n        <div className={\"movie-page-container\"}>\r\n            <div className={\"movie-page-img\"}\r\n                style={{backgroundImage: `url(\"movie-covers/${movie.img}\")`}}/>\r\n            <section className={\"movie-page-section\"}>\r\n                <div className={\"movie-page-name\"}>\r\n                    {movie.name}\r\n                </div>\r\n                <div className={\"movie-page-rate\"}>\r\n                    Rate: {movie.rate}\r\n                </div>\r\n                <div className={\"movie-page-description\"}>\r\n                    {movie.description}\r\n                </div>\r\n            </section>\r\n        </div>\r\n    )\r\n};\r\n","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {TState} from \"../store\";\r\nimport {MoviePageComponent} from \"../components/MoviePage.component\";\r\n\r\nexport const MoviePageContainer: React.FC =\r\n(): React.ReactElement => {\r\n    const movie = useSelector((state: TState) => state.movie);\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                (movie && movie.data !== null)\r\n                    ? <MoviePageComponent movie={movie.data}/>\r\n                    : \"No such movie\" // Here should be error page if there is no data from real server\r\n            }\r\n        </div>\r\n    )\r\n};","import React from \"react\";\r\nimport {Page} from \"../theme/Page\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {MoviePageContainer} from \"../containers/MoviePage.container\";\r\n\r\nexport const PageMovieComponent: React.FC = () => {\r\n    return (\r\n        <Page>\r\n            <NavLink to={\"/\"}>Back</NavLink>\r\n            <MoviePageContainer />\r\n        </Page>\r\n    )\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {IActionInitial, IActionOnError, IActionWithData} from \"../actions/action.interface\";\r\nimport {MOVIES_FETCH_FAILURE, MOVIES_FETCH_QUERY, MOVIES_FETCH_SUCCESS} from \"../actions/movies.actions\";\r\nimport {Reducer, ReducerAction} from \"react\";\r\n\r\nexport interface IMovie {\r\n    id: number,\r\n    key: string,\r\n    name: string,\r\n    description: string,\r\n    genres: Array<string>,\r\n    rate: string,\r\n    length: number,\r\n    img: string\r\n}\r\n\r\ninterface IMoviesActionWithData extends IActionWithData {\r\n    payload: Array<IMovie>\r\n}\r\n\r\nexport interface IMoviesState {\r\n    data: Array<IMovie>,\r\n    loading: boolean,\r\n    error: Error | null\r\n}\r\n\r\nexport const moviesStateInitial: IMoviesState = {\r\n    data: [],\r\n    loading: false,\r\n    error: null\r\n};\r\n\r\nexport type TMoviesAction = IMoviesActionWithData & IActionInitial & IActionOnError;\r\n\r\nexport const moviesReducer: Reducer<IMoviesState, TMoviesAction> = (\r\n    state: IMoviesState = moviesStateInitial,\r\n    action: TMoviesAction\r\n): IMoviesState => {\r\n    switch (action.type) {\r\n        case MOVIES_FETCH_QUERY:\r\n            return {...state, loading: true};\r\n        case MOVIES_FETCH_SUCCESS:\r\n            return {...state, loading: false, data: action.payload, error: null};\r\n        case MOVIES_FETCH_FAILURE:\r\n            return {...state, loading: false, data: [], error: action.error};\r\n        default:\r\n            return state;\r\n    }\r\n};","/**\r\n * Movie type definition\r\n */\r\nexport type TMovie = {\r\n    id: number,\r\n    key: string,\r\n    name: string,\r\n    description: string,\r\n    genres: Array<string>,\r\n    rate: string,\r\n    length: number,\r\n    img: string\r\n}\r\n\r\n/**\r\n * Movie state definition\r\n */\r\n\r\nexport type TMovieState = {\r\n    data: TMovie | null\r\n}\r\n\r\n/**\r\n * Movie initial state\r\n */\r\nexport const MovieInitialState: TMovieState = {\r\n    data: null\r\n};","import {combineReducers} from \"redux\";\r\nimport {moviesReducer} from \"./movies.reducer\";\r\nimport {moviesViewReducer} from \"./movies-view.reducer\";\r\nimport {movieReducer} from \"./movie.reducer\";\r\n\r\n/**\r\n * Root reducer\r\n */\r\nexport default combineReducers({\r\n    movies: moviesReducer,\r\n    moviesView: moviesViewReducer,\r\n    movie: movieReducer\r\n});\r\n","import {IActionInitial, IActionOnError, IActionWithData} from \"./action.interface\";\r\nimport {Dispatch} from \"redux\";\r\nimport {TMoviesAction} from \"../reducers/movies.reducer\";\r\n/**\r\n * Actions names definitions\r\n */\r\nexport const MOVIES_FETCH_QUERY = \"[Movies] Fetching...\";\r\nexport const MOVIES_FETCH_SUCCESS = \"[Movies] Fetched Success\";\r\nexport const MOVIES_FETCH_FAILURE = \"[Movies] Fetched Failure\";\r\n\r\n/**\r\n * Action on start fetching movies\r\n */\r\nconst fetchMoviesQuery = (): IActionInitial => ({\r\n    type: MOVIES_FETCH_QUERY\r\n});\r\n\r\n/**\r\n * Action on successfully received data\r\n * @param data\r\n */\r\nconst fetchMoviesSuccess = (data: any): IActionWithData => ({\r\n    type: MOVIES_FETCH_SUCCESS,\r\n    payload: data\r\n});\r\n\r\n/**\r\n * Action when error occurred\r\n * @param error\r\n */\r\nconst fetchMoviesFailure = (error: Error): IActionOnError => ({\r\n    type: MOVIES_FETCH_FAILURE,\r\n    error\r\n});\r\n\r\n/**\r\n * Async action to fetch movies\r\n */\r\nexport const fetchMovies = () => (dispatch: Dispatch) => {\r\n    dispatch(fetchMoviesQuery());\r\n    fetch(\"movies-list.json\")\r\n        .then(\r\n            (response: Response) => response.json()\r\n        )\r\n        .then(\r\n            (data: any) => {\r\n                dispatch(fetchMoviesSuccess(data));\r\n            }\r\n        )\r\n        .catch(\r\n            (error: Error) => dispatch(fetchMoviesFailure(error))\r\n        )\r\n};","import {Reducer} from \"redux\";\r\nimport {MoviesViewStateInitial} from \"../store/movies-view.store\";\r\nimport {TMoviesViewAction} from \"../actions/movies-view.action\";\r\n\r\nexport const moviesViewReducer: Reducer<string, TMoviesViewAction> = (\r\n    state = MoviesViewStateInitial,\r\n    action\r\n): string => action.payload || MoviesViewStateInitial;\r\n","import {Reducer} from \"redux\";\r\nimport {TMovieAction} from \"../actions/movie.action\";\r\nimport {MovieInitialState, TMovieState} from \"../store/movie.store\";\r\n\r\n/**\r\n * Movie Reducer. Should implement async actions in real app\r\n * @param state\r\n * @param action\r\n */\r\nexport const movieReducer: Reducer<TMovieState, TMovieAction> = (\r\n    state = MovieInitialState,\r\n    action\r\n): TMovieState => ({...state, data: action.payload} || MovieInitialState);\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\"\r\nimport rootReducer from \"../reducers\";\r\nimport {IMoviesState} from \"../reducers/movies.reducer\";\r\nimport {TMovieState} from \"./movie.store\";\r\n\r\n/**\r\n * App State type definition\r\n */\r\nexport type TState = {\r\n    movies: IMoviesState,\r\n    movie: TMovieState,\r\n    moviesView: string // defined in MoviesViewStore as a name of view kind\r\n}\r\n\r\n/**\r\n * Create app store\r\n */\r\nexport const Store = createStore(rootReducer, applyMiddleware(thunk));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {Store} from \"./store\";\nimport {fetchMovies} from \"./actions/movies.actions\";\n\n// @ts-ignore\nStore.dispatch(fetchMovies());\nReactDOM.render(\n    <Provider store={Store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport './App.css';\nimport {Header} from \"./theme/Header\";\nimport {PageMoviesComponent} from \"./components/PageMovies.component\";\nimport {PageMovieComponent} from \"./components/PageMovie.component\";\n\nexport const App: React.FC = () => {\n  return (\n      <div>\n          <Header>Movies Application</Header>\n          <Router>\n              <Switch>\n                  <Route exact path=\"/\" component={PageMoviesComponent} />\n                  <Route path=\"/:id\" component={PageMovieComponent} />\n              </Switch>\n          </Router>\n      </div>\n  );\n};\n"],"sourceRoot":""}